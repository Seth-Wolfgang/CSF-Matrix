
#pragma once
#define META_DATA_SIZE 28

namespace CSF {
    template <typename T, typename IndexType, 1>
    class Iterator<T, IndexType, 3> {


        Iterator(CSF::SparseMatrix<T, IndexType, 3>& matrix) {
            
        /**
         * @brief Construct a new CSFiterator object using a CSF::SparseMatrix
         *
         * @param filePath
         */

        Iterator(CSF::SparseMatrix<T, indexType, compressionLevel>& matrix) {

            //Sets the beginnign and end of the data
            data = matrix.beginPtr();
            endOfData = matrix.endPtr();
            currentIndex = data;

            //Reads in the metadata
            readMetaData();

            //Skips metadata and goes to first column
            currentIndex = static_cast<char*>(currentIndex) + META_DATA_SIZE;
            goToColumn(0);

            // To make sure the matrix isn't empty or in some way invalid
            // assert(currentIndex < endOfData);
        }

        /**
         * @brief Construct a new Iterator object using a file
         *
         * @param filePath
         */

        Iterator(const char* filePath) {
            readFile(filePath);

            // read first 28 bytes of fileData put it into params -> metadata
            uint32_t params[8];

            memcpy(&params, currentIndex, META_DATA_SIZE);
            currentIndex = static_cast<char*>(currentIndex) + META_DATA_SIZE;

            // Sets the metadata based on the file
            readMetaData();

            //Uses the column pointer to go to the first column
            goToColumn(0);
        }












    }
}